// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma generate
// npx prisma db push
// npx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole{
  ADMIN
  USER
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled  Boolean @default(true)
  twoFactorConfirmation   TwoFactorConfirmation?
}

// to verify user email at registration time
model VerificationToken {
  id        String @id @default(cuid())
  email     String
  token     String @unique
  expires   DateTime

  @@unique([email, token])
}

// to reset password
model PasswordResetToken {
  id    String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

// 2FA token
model TwoFactorToken{
  id    String @id @default(cuid())
  email   String
  token   String
  expires   DateTime

  @@unique([email, token])
}

// to track user who enabled 2 factor confirmation
model TwoFactorConfirmation{
  id    String @id @default(cuid())
  userId    String
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)// also delete this when user deleted
  @@unique([userId])
}